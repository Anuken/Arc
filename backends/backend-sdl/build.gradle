sourceSets.main.java.srcDirs = ["src"]
sourceSets.main.resources.srcDirs = ["libs/linux64", "libs/macosx64","libs/windows32", "libs/windows64", "libs/openal"]

dependencies {
    testImplementation libraries.jnigen
    testImplementation aproj(":arc-core")
}

ext {
    windowsVersion = [sdl: "2.0.20", glew: "2.2.0"]
}

apply plugin: "com.badlogicgames.gdx.gdx-jnigen"

file("jni").mkdir()

task preJni{
    //this absolutely needs to run during configuration so jnigen can run downloaded sdl-config scripts for configuration of library flags
    try{
        if(!file("jni/glew.zip").exists()){
            println "Fetching GLEW $windowsVersion.glew source..."
            "curl -o $rootDir/backends/backend-sdl/jni/glew.zip -L https://github.com/nigels-com/glew/releases/download/glew-$windowsVersion.glew/glew-${windowsVersion.glew}.zip".execute().waitFor()
            "unzip -qq -d $rootDir/backends/backend-sdl/jni $rootDir/backends/backend-sdl/jni/glew.zip".execute().waitFor()
        }

        if(!file("jni/sdlmingw.tar.gz").exists()){
            println "Fetching SDL-$windowsVersion.sdl-mingw builds..."
            "curl -o $rootDir/backends/backend-sdl/jni/sdlmingw.tar.gz -L https://www.libsdl.org/release/SDL2-devel-$windowsVersion.sdl-mingw.tar.gz".execute().waitFor()
            "tar -xvzf $rootDir/backends/backend-sdl/jni/sdlmingw.tar.gz -C $rootDir/backends/backend-sdl/jni".execute().waitFor()
        }
    }catch(Exception youAreProbablyOnWindowsOrDontHaveUnzip){}

    doFirst{
        copy{
            from "$rootDir/arc-core/build/classes/java/main"
            into "$rootDir/backends/backend-sdl/build/classes/java/main"
            include "**"
        }
    }
}

/*

PACKAGES: Linux (Ubuntu)

- libdrm-dev
- libsdl2-dev
- libgbm-dev
- ant

PACKAGES: Linux -> Windows Cross-Compilation

- mingw32
- ant

PACKAGES: Mac

- sdl2
- glew
- ant

 */

jnigen{
    def execCmd = { cmd ->
        try{
            Scanner s = new Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter("\\A")
            return s.hasNext() ? s.next().trim() : ""
        }catch(Exception ignored){
            //fail silently, because this is run during standard arc builds and it shouldn't fail
            //TODO don't do anything at all in certain situations?
        }
    }

    sharedLibName = "sdl-arc"
    temporaryDir = file("build/target/native").absolutePath
    libsDir = file("libs").absolutePath


    all{
        cppIncludes = ["*.cpp"]
        cIncludes = ["*.c"]
    }
    add(Linux, x64){
        cppFlags += " " + execCmd("pkg-config --cflags glew sdl2")
        cFlags = cppFlags
        libraries = execCmd("pkg-config --libs glew sdl2") + " -Wl,-Bdynamic"
        linkerFlags = "-shared -m64"
    }
    add(Windows, x64){
        def sdlPath = "SDL2-$windowsVersion.sdl/x86_64-w64-mingw32"
        def glewPath = "glew-$windowsVersion.glew"
        def root = "$rootDir/backends/backend-sdl/jni"
        headerDirs += ["$sdlPath/include/SDL2", "$glewPath/include"]
        cIncludes += ["$glewPath/src/glew.c"]
        cppFlags += " " + execCmd("sh $root/$sdlPath/bin/sdl2-config --cflags")
        cFlags = cppFlags
        libraries = execCmd("sh $root/$sdlPath/bin/sdl2-config --static-libs") + " -lopengl32"
        linkerFlags += " -L $root/$sdlPath/lib"
    }
    add(Windows, x32){
        def sdlPath = "SDL2-$windowsVersion.sdl/i686-w64-mingw32"
        def glewPath = "glew-$windowsVersion.glew"
        def root = "$rootDir/backends/backend-sdl/jni"
        headerDirs += ["$sdlPath/include/SDL2", "$glewPath/include"]
        cIncludes += ["$glewPath/src/glew.c"]
        cppFlags += " " + execCmd("sh $root/$path/bin/sdl2-config --cflags")
        cFlags = cppFlags
        libraries = execCmd("sh $root/$path/bin/sdl2-config --static-libs") + " -lopengl32"
        linkerFlags += " -L $root/$path/lib"
    }

    if(System.getProperty("os.arch") != "aarch64"){
        add(MacOsX, x64){
            cppFlags = cFlags= execCmd("sdl2-config --cflags") + " -c -Wall -O2 -arch x86_64 -DFIXED_POINT -fmessage-length=0 -fPIC -mmacosx-version-min=10.9 -stdlib=libc++"
            linkerFlags = "-shared -arch x86_64 -mmacosx-version-min=10.9 -stdlib=libc++"
            libraries = "/usr/local/lib/libSDL2.a -lm -liconv -Wl,-framework,CoreAudio -Wl,-framework,CoreHaptics -Wl,-weak_framework,GameController -Wl,-framework,OpenGL,-weak_framework,AudioToolbox -Wl,-framework,ForceFeedback -lobjc -Wl,-framework,CoreVideo -Wl,-framework,Cocoa -Wl,-framework,Carbon -Wl,-framework,IOKit -Wl,-weak_framework,QuartzCore -Wl,-weak_framework,Metal /usr/local/lib/libGLEW.a"
        }
    }else{

        //doesn't work on CI, have to use native M1
        add(MacOsX, x64, ARM){
            cppFlags = cFlags = execCmd("sdl2-config --cflags") + " -c -Wall -O2 -arch arm64 -DFIXED_POINT -fmessage-length=0 -fPIC -mmacosx-version-min=10.9 -stdlib=libc++"
            linkerFlags = "-shared -arch arm64 -mmacosx-version-min=10.9 -stdlib=libc++"
            //execCmd("sdl2-config --static-libs") + " -Wl,-framework,OpenGL"
            libraries = "/usr/local/lib/libSDL2.a -lm -liconv -Wl,-framework,CoreAudio -Wl,-weak_framework,GameController -Wl,-framework,OpenGL,-weak_framework,AudioToolbox -Wl,-framework,ForceFeedback -lobjc -Wl,-framework,CoreVideo -Wl,-framework,Cocoa -Wl,-framework,Carbon -Wl,-framework,IOKit -Wl,-weak_framework,QuartzCore -Wl,-weak_framework,Metal /usr/local/lib/libGLEW.a"
        }
    }

}

getTasksByName("jnigen", true).each{
    it.dependsOn preJni
    it.dependsOn classes
    it.dependsOn aproj(":arc-core").getTasksByName("compileJava", true)
}
